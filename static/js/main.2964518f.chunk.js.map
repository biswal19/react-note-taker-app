{"version":3,"sources":["redux/actionTypes.js","redux/reducers/notes.js","redux/reducers/inputs.js","redux/reducers/index.js","redux/createStore.js","redux/actions/noteActions.js","redux/actions/inputActions.js","components/InputSection.js","components/NoteItem.js","components/NotesSection.js","App.js","serviceWorker.js","index.js"],"names":["initialState","notes","id","title","content","combineReducers","state","action","type","actionTypes","push","note","index","forEach","i","inputs","createStore","rootReducers","InputSection","useSelector","dispatch","useDispatch","className","placeholder","value","onChange","e","inputActions","target","onClick","noteActions","style","marginLeft","backgroundColor","NoteItem","onItemClicked","role","NotesSection","length","map","item","App","store","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2964518f.chunk.js","sourcesContent":["export default  {\n  ADD_NOTE: 'ADD_NOTE',\n  DELETE_NOTE: 'DELETE_NOTE',\n  UPDATE_NOTE: 'UPDATE_NOTE',\n\n  SET_INPUT_TITLE: 'SET_INPUT_TITLE',\n  SET_INPUT_CONTENT: 'SET_INPUT_CONTENT',\n  SET_INPUT_ID: 'SET_INPUT_ID',\n  RESET_INPUT: 'RESET_INPUT',\n}","import actionTypes from '../actionTypes';\n\nconst initialState = {\n  notes: []\n}\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.ADD_NOTE: {\n      const notes = [...state.notes];\n      notes.push(action.note);\n      return {\n        notes,\n      }\n    }\n    case actionTypes.UPDATE_NOTE: {\n      const { index, note } = action;\n      const notes = [...state.notes];\n      notes[index] = note;\n      return {\n        notes,\n      }\n    }\n    case actionTypes.DELETE_NOTE: {\n      const { index } = action;\n      const notes = [];\n      state.notes.forEach((note, i) => {\n        if(index !== i) {\n          notes.push(note)\n        }\n      })      \n      return {\n        notes,\n      }\n    }\n    default:\n      return state;\n  }\n}","import actionTypes from '../actionTypes';\n\nconst initialState = {\n  id: -1,\n  title: '',\n  content: '',\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_INPUT_TITLE: {\n      const { title } = action;\n      return {\n        ...state,\n        title,\n      }\n    }\n    case actionTypes.SET_INPUT_CONTENT: {\n      const { content } = action;\n      return {\n        ...state,\n        content,\n      }\n    }\n    case actionTypes.SET_INPUT_ID: {\n      const { id } = action;\n      return {\n        ...state,\n        id,\n      }\n    }\n    case actionTypes.RESET_INPUT: {\n      return initialState;\n    }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport notes from './notes';\nimport inputs from './inputs';\n\nexport default combineReducers({\n  notes,\n  inputs,\n})\n","import { createStore } from 'redux';\nimport rootReducers from './reducers';\n\nexport default createStore(rootReducers);","import actionTypes from '../actionTypes';\n\nexport default {\n  addNote: (note)=> ({\n    type: actionTypes.ADD_NOTE,\n    note\n  }),\n  updateNote: (index, note) => ({\n    type: actionTypes.UPDATE_NOTE,\n    index,\n    note,\n  }),\n  deleteNote: (index) => ({\n    type: actionTypes.DELETE_NOTE,\n    index\n  })\n}","import actionTypes from '../actionTypes';\n\nexport default {\n  setInputTitle: title => ({\n    type: actionTypes.SET_INPUT_TITLE,\n    title,\n  }),\n  setInputContent: content => ({\n    type: actionTypes.SET_INPUT_CONTENT,\n    content\n  }),\n  setInputId: id => ({\n    type: actionTypes.SET_INPUT_ID,\n    id,\n  }),\n  resetInputs: () => ({\n    type: actionTypes.RESET_INPUT,\n  })\n}","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport noteActions from '../redux/actions/noteActions';\nimport inputActions from '../redux/actions/inputActions';\nimport './InputSection.style.css';\n\nconst InputSection = () => {\n  const id = useSelector(state => state.inputs.id);\n  const title = useSelector(state => state.inputs.title);\n  const content = useSelector(state => state.inputs.content);\n  const dispatch = useDispatch();\n\n  const addNote = () => {\n    if(title && content) {\n      dispatch(noteActions.addNote({\n        title,\n        content\n      }))\n      dispatch(inputActions.resetInputs())\n    }\n  }\n\n  const updateNote = () => {\n    if(title && content) {\n      dispatch(noteActions.updateNote(id, {\n        title, content\n      }))\n      dispatch(inputActions.resetInputs())\n    }    \n  }\n\n  const deleteNote = () => {\n    dispatch(noteActions.deleteNote(id))\n    dispatch(inputActions.resetInputs())\n  }\n\n  return (\n    <div className=\"InputSection container\">\n      <input\n        type=\"text\"\n        placeholder=\"Note title\"\n        value={title}\n        onChange={e => \n          dispatch(inputActions.setInputTitle(e.target.value))\n        }\n      />\n      <textarea\n        placeholder=\"Note content\"\n        value={content}\n        onChange={e => \n          dispatch(inputActions.setInputContent(e.target.value))\n        }\n      ></textarea>\n      <div\n        className=\"InputSection container btnWrapper\"\n      >\n        <button\n          onClick={id === -1 ? addNote : updateNote}\n        >\n          {id === -1 ? \"ADD NOTE\" : \"UPDATE NOTE\"}\n        </button>      \n        {id !== -1 &&\n          <button\n            onClick={deleteNote}\n            style={{ marginLeft: '1em', backgroundColor: 'red' }}\n          >\n            DELETE NOTE\n          </button>\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default InputSection;\n","import React from 'react';\nimport './NoteItem.styles.css';\n\nconst NoteItem = ({ title, content, onItemClicked}) => {\n  return (\n    <div\n      className=\"NoteItem__container\"\n      role=\"button\"\n      onClick={onItemClicked}\n    >\n      <h2>{title}</h2>\n      <p>{content}</p>\n    </div>\n  );\n};\n\nexport default NoteItem;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport NoteItem from './NoteItem';\nimport inputActions from '../redux/actions/inputActions';\nimport './NotesSection.style.css';\n\nconst NotesSection = () => {\n  const dispatch = useDispatch();\n  const notes = useSelector(state => state.notes.notes)\n\n  const onItemClicked = (item, index) => {\n    dispatch(inputActions.setInputId(index));\n    dispatch(inputActions.setInputTitle(item.title));\n    dispatch(inputActions.setInputContent(item.content));\n  }\n\n  if(notes.length === 0) {\n    return (\n      <div className=\"NotesSection__container__empty\">\n        <p>There is no note yet. Please add one.</p>\n      </div>  \n    )\n  }\n\n  return (\n    <div className=\"NotesSection__container\">\n      {notes.map((item, index) => {\n        if(item) {\n          return (\n            <NoteItem\n              title={item.title}\n              content={item.content}\n              onItemClicked={() => {\n                onItemClicked(item, index);\n              }}\n            />      \n          )\n        }\n        return null;\n      })}\n    </div>\n  );\n};\n\nexport default NotesSection;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './redux/createStore';\nimport InputSection from './components/InputSection';\nimport NotesSection from './components/NotesSection';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"container\">\n        <h1>My Notes</h1>\n        <InputSection />\n        <div className=\"line\"></div>\n        <NotesSection />\n      </div>\n    </Provider>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}